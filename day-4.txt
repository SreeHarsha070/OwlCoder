#Euclid's Algorithm
#LCM(x,y)=x*y/GCD(x,y)
#12,24 ->  24,12
#12,0



def computeGCD(x, y):
    while(y):
        x, y = y, x % y
    return x

def compute_lcm(a,b):
    t=(a*b)//computeGCD(a,b)
    return t
a,b=map(int,input().split())

g=computeGCD(a,b)
l=compute_lcm(a,b)
print("GCD",g,"LCM",l)

15432
-1
4
32
2-1

-1	4 3	 2 -1
-1 2 3 4 -1

#User function Template for python3


def Smallestonleft (arr,  n) : 
    #Complete the function
    # 1 5 4 3 2
    # -1 4 3 2 -1
    arr.reverse()
    l=[]
    for i in range(n):
        t=-1
        for j in range(i+1,n):
            if(arr[j]<arr[i]):
                t=arr[j]
                break
        l.append(t)
    l.reverse()
    return l
        
            
            



#{ 
#  Driver Code Starts
#Initial Template for Python 3


for _ in range(0,int(input())):
    
    n = int(input())
    arr = list(map(int,input().strip().split()))
    res = Smallestonleft(arr, n);
    for each in res:
        print(each,end=' ')
    print()




# } Driver Code Ends

st=2
4
2	3	4	5	1
-1
3
[2]
2
[2,3]
[2,3,4,5]
25913
25913




